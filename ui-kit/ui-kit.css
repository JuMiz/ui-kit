:root {
    --roboto-font: "Roboto";

    /* main palette colors */
    --dark-blue-color: rgb(2, 79, 109);
    --dark-purple-color: rgb(67, 40, 59);
    --sea-green-color: rgb(0, 167, 134);
    /* */

    --sea-green-lighter-color: rgb(137, 215, 200);
    --sea-green-darker-color: rgb(0, 128, 102);
    --sea-green-disabled-color: rgb(0, 204, 163);
    --sea-green-border-color: rgb(51, 185, 158);

    --light-grey: rgb(238, 238, 238);
    --dark-grey-color: rgb(93, 93, 93);

    --grey-border-color: rgb(204, 204, 204);

    --white-color: rgb(255, 255, 255);

    --error-color: rgb(221, 89, 89);
    --success-color: var(--sea-green-color);

    --disabled-bg-color: rgb(230, 230, 230);
}

body {
    margin: 0;
    font-family: Roboto;
}

a {
    text-decoration: none;
    color: unset;
}

button:hover {
    cursor: pointer;
}

.main-header {
    background-color: var(--light-grey);
    color: var(--dark-grey-color);
    padding: 40px 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.color-palette-container {
    display: flex;
}

.color-palette {
    border-radius: 50%;
    width: 40px;
    height: 40px;
    margin-right: 10px;
}

.purple {
    background-color: var(--dark-purple-color);
}

.blue {
    background-color: var(--dark-blue-color);
}

.green {
    background-color: var(--sea-green-color);
}

.kit-header {
    background-color: var(--light-grey);
    padding: 0 20px;
    display: flex;
    align-items: center;
    text-transform: capitalize;
}

.kit-header h1 {
    color: var(--dark-grey-color);
    font-size: 26px;
    font-family: "Bariol", var(--roboto-font);
    font-weight: 400;
    text-align: left;
    margin: 0;
}

.three-columns h1{
    flex: 0 0 33.333333%;
}

.three-columns div{
    flex: 0 0 33.333333%;
}

.three-columns div ul {
    padding-left: 0;
    list-style-type: none;
}

.kit-demo-block {
    display: flex;
    flex-direction: column;
    margin-top: 7px;
}

.kit-demo-block-footer {
    background-color: var(--light-grey);
}

.kit-header, .kit-demo-block-footer {
    height: 60px;
}

.items-container {
    display: flex;
    gap: 20px;
    padding: 40px 20px;
}

.items-container.three-columns {
    gap: unset;
}

/*Button*/
.primary-btn {
    cursor: pointer;
    min-width: 210px;
    height: 50px;
    border: none;
    border-radius: 5px;
    color: var(--white-color);
    background-color: var(--sea-green-color);
    font-size: 16px;
    font-family: "ProximaNova", var(--roboto-font);
    font-weight: 400;
    text-transform: uppercase;
    text-align: center;
    box-shadow: 0 3px var(--sea-green-darker-color);
    transition: all 0.3s ease-in-out;
    padding: 5px;
}

.primary-btn:hover,
.button:focus {
    color: var(--dark-blue-color);
    outline: 0;
}

.primary-btn:active {
    color: var(--white-color);
    background-color: var(--dark-purple-color);
    box-shadow: unset;
}

.primary-btn:disabled {
    color: var(--sea-green-disabled-color);
    pointer-events: none;
    box-shadow: unset;
}
/**/

/*Menu*/
.menu {
    cursor: pointer;
    background-color: var(--sea-green-color);
    display: flex;
    list-style-type: none;
    color: var(--sea-green-lighter-color);
    padding: 0;
    border-radius: 5px;
    text-transform: uppercase;
    box-shadow: 0 3px var(--sea-green-darker-color);
}

.menu li {
    padding: 20px 25px;
    position: relative;

    transition: 0.8s;
}

.menu li:not(:last-child):after {
    content: "";
    position: absolute;
    top: 10%;
    right: 0;
    width: 2px;
    height: 80%;
    background: var(--sea-green-border-color);
}

.menu li {
    position: relative;
}
.menu li:hover:before {
    content:'';
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
    margin: 0 auto;
    width: 0;
    height: 0;
    border-bottom: 8px solid var(--sea-green-darker-color);
    border-left: 10px solid transparent;
    border-right: 10px solid transparent;
}

.menu a:active {
    color: var(--white-color);
}

.menu li a {
    position: relative;
}

.menu .menu_item_notification a:after {
    content: '';
    position: absolute;
    border-radius: 50%;
    background-color: var(--sea-green-lighter-color);
    width: 10px;
    height: 10px;
    top: 50%;
    transform: translateY(-50%);
    -webkit-transform: translateY(-50%);
    -moz-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
}
/* */

/* Input */
.kit-input-container {
    position: relative;
}

.kit-input-container label {
    display: none;
}

.kit-input-container i {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    right: 10px;
}

.kit-input {
    border-radius: 3px;
    border-style: solid;
    border-color: var(--grey-border-color);
    padding: 10px;
    text-indent: 5px;
}

.kit-input:active {
    border-color: var(--dark-grey-color);
}

.kit-input::placeholder {
    color: var(--grey-border-color);
}

.error {
    border-color: var(--error-color);
    color: var(--error-color);
}

.kit-input.error::placeholder {
    color: var(--error-color);
}

.success {
    border-color: var(--sea-green-color);
    color: var(--sea-green-color);
}

.kit-input.success::placeholder {
    color: var(--sea-green-color);
}

.kit-input:disabled {
    pointer-events: none;
    background-color: var(--disabled-bg-color);
}

/* Wiggle animation for errors */
.wiggle {
    animation: wiggle 2s linear infinite;
}

.wiggle:focus-within {
    animation: none;
}

/* Keyframes */
@keyframes wiggle {
    0%, 7% {
        transform: rotateZ(0);
    }
    15% {
        transform: rotateZ(-15deg);
    }
    20% {
        transform: rotateZ(10deg);
    }
    25% {
        transform: rotateZ(-10deg);
    }
    30% {
        transform: rotateZ(6deg);
    }
    35% {
        transform: rotateZ(-4deg);
    }
    40%, 100% {
        transform: rotateZ(0);
    }
}

/* */

/* Icons */

/* infinite rotation */
.fa-infinite-spin-hover:hover {
    animation: fa-infinite-spin 2s infinite linear;
}

@keyframes fa-infinite-spin {
    0% {
        -webkit-transform: rotate(0deg);
        transform: rotate(0deg)
    }
    100% {
        -webkit-transform: rotate(359deg);
        transform: rotate(359deg)
    }
}

/* single spin */
.fa-single-spin-hover:hover{
    -webkit-transition: all 0.6s ease-in-out;
    -moz-transition: all 0.6s ease-in-out;
    -o-transition: all 0.6s ease-in-out;
    -ms-transition: all 0.6s ease-in-out;
    transition: all 0.6s ease-in-out;
    -webkit-transform: rotate(360deg);
    -o-transform: rotate(360deg);
    -moz-transform: rotate(360deg);
    -ms-transform: rotate(360deg);
    transform: rotate(360deg);
}

/* infinite fast spin */
.fa-infinite-spin {
    animation-name: infinite-spin;
    animation-duration: 10000ms;
    animation-iteration-count: infinite;
    animation-timing-function: linear;
}

@keyframes infinite-spin {
    from {
        transform:rotate(0deg);
    }
    to {
        transform:rotate(360deg);
    }
}

/* */


/*Checkboxes*/

/* Checkbox container */
.checkbox-container {
    color: var(--dark-grey-color);
    padding-top: 4px;
    display: block;
    position: relative;
    padding-left: 42px;
    margin-bottom: 22px;
    cursor: pointer;
    font-size: 16px;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    text-transform: uppercase;
}

/* Hide the browser's default checkbox */
.checkbox-container input {
    position: absolute;
    opacity: 0;
    cursor: pointer;
    height: 0;
    width: 0;
}

/* Create a custom checkbox */
.checkmark {
    position: absolute;
    top: 0;
    left: 0;
    height: 25px;
    width: 25px;
    background-color: var(--light-grey);
    border: 2px solid var(--dark-grey-color);
    border-radius: 5px;
}

.checkmark:disabled {
    pointer-events: none;
}

.checkbox-container input:disabled ~ .checkmark {
    border-color: var(--grey-border-color);
    cursor: default;
}

.checkbox-container:has(input, :disabled) {
    cursor: unset;
}

/* On mouse-over, add a success color border */
.checkbox-container:hover input:not([disabled]) ~ .checkmark {
    border-color: var(--success-color);
}

/* When the checkbox is checked, add a success color border */
.checkbox-container input:not([disabled]):checked ~ .checkmark {
    border-color: var(--success-color);
}

/* Create the checkmark/indicator (hidden when not checked) */
.checkmark:after {
    content: "";
    position: absolute;
    display: none;
}

/* Show the checkmark when checked */
.checkbox-container input:checked ~ .checkmark:after {
    display: block;
}

/* Style the checkmark/indicator */
.checkbox-container .checkmark:after {
    left: 9px;
    top: 5px;
    width: 5px;
    height: 10px;
    border: solid var(--success-color);
    border-width: 0 3px 3px 0;
    -webkit-transform: rotate(45deg);
    -ms-transform: rotate(45deg);
    transform: rotate(45deg);
}

.checkbox-container input:disabled ~ .checkmark:after {
    border-color: var(--grey-border-color);
}
/* */

/* Radio Buttons */
.radio-button-container {
    color: var(--dark-grey-color);
    text-transform: uppercase;
    display: block;
    position: relative;
    cursor: pointer;
    font-size: 16px;
    padding-top: 4px;
    padding-left: 42px;
    margin-bottom: 22px;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

/* Hide the browser's default radio button */
.radio-button-container input {
    position: absolute;
    opacity: 0;
    cursor: pointer;
}

/* Create a custom radio button */
.radio-button-container .checkmark {
    position: absolute;
    top: 0;
    left: 0;
    height: 25px;
    width: 25px;
    background-color: var(--light-grey);
    border-radius: 50%;
}

.checkmark:disabled {
    pointer-events: none;
}

.radio-button-container input:disabled ~ .checkmark {
    border-color: var(--grey-border-color);
    cursor: default;
}

.radio-button-container:has(input, :disabled) {
    cursor: unset;
}

/* On mouse-over, add a green border color */
.radio-button-container:hover input:not([disabled]) ~ .checkmark {
    border-color: var(--success-color);
}

/* When the radio button is checked, add a green border */
.radio-button-container input:not([disabled]):checked ~ .checkmark {
    border-color: var(--success-color);
}

/* Create the indicator (the dot/circle - hidden when not checked) */
.radio-button-container .checkmark:after {
    content: "";
    position: absolute;
    display: none;
}

/* Show the indicator (dot/circle) when checked */
.radio-button-container input:checked ~ .checkmark:after {
    display: block;
}

/* Style the indicator (dot/circle) */
.radio-button-container .checkmark:after {
    top: 6px;
    left: 6px;
    width: 13px;
    height: 13px;
    border-radius: 50%;
    background: var(--success-color);
}

.radio-button-container input:disabled ~ .checkmark:after {
    background: var(--grey-border-color);
}

/* */

/* Tag */
.tag {
    position: relative;
    text-align: start;
    padding-left: 20px;
    text-transform: capitalize;
    margin-bottom: 10px;
    min-width: 210px;
    height: 50px;
    border: none;
    border-radius: 5px;
    color: var(--white-color);
    background-color: var(--sea-green-color);
    font-size: 16px;
    font-family: var(--roboto-font);
    font-weight: 600;
}

.tag i {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    right: 15px;
}

.tag-delete {
    background-color: var(--error-color);
}

.tag-add {
    background-color: var(--grey-border-color);
}

.tag-add:hover .grow-on-hover {
    font-size: 2em;
}

.grow-on-hover {
    transition: font-size 0.3s ease;
}

/* */
